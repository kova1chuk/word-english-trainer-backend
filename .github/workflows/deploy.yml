name: Deploy FastAPI to ECS

on:
  push:
    branches: [ dev ]

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ACCOUNT_ID:     ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECR_REGISTRY:   ${{ secrets.ECR_REGISTRY }}
  ECS_CLUSTER:    ${{ secrets.ECS_CLUSTER_NAME }}
  ECS_SERVICE:    ${{ secrets.ECS_SERVICE_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region:    ${{ env.AWS_REGION }}

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          build-args: |
            PROJECT_NAME=${{ secrets.PROJECT_NAME }}

      - name: Deploy new image to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster:                   ${{ env.ECS_CLUSTER }}
          service:                   ${{ env.ECS_SERVICE }}
          image:                     ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          wait-for-service-stability: true
          environment-variables: |
            PROJECT_NAME=${{ secrets.PROJECT_NAME }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
